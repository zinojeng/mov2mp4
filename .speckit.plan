# Technical Implementation Plan: MOV to MP4 Converter

## Technology Stack

### Core Language
- **Python 3.8+**: Cross-platform, excellent library support, easy CLI development

### Key Dependencies
- **ffmpeg-python**: Python wrapper for FFmpeg
- **click**: Modern CLI framework with rich features
- **tqdm**: Progress bar library
- **pathlib**: File path handling (standard library)

### External Tools
- **FFmpeg**: Industry-standard video processing tool (must be installed separately)

## Architecture

### Project Structure
```
mov2mp4/
├── mov2mp4/
│   ├── __init__.py
│   ├── cli.py           # CLI interface using Click
│   ├── converter.py     # Core conversion logic
│   ├── validator.py     # File validation
│   ├── progress.py      # Progress tracking
│   └── utils.py         # Helper functions
├── tests/
│   ├── test_converter.py
│   ├── test_validator.py
│   └── test_cli.py
├── setup.py
├── requirements.txt
├── README.md
└── .speckit.*
```

### Core Modules

#### 1. cli.py
- Entry point for the application
- Use Click for argument parsing and validation
- Handle command-line options and arguments
- Orchestrate the conversion workflow
- Display results and errors

#### 2. converter.py
- `VideoConverter` class
- Methods:
  - `convert_single(input_path, output_path, quality)`: Convert one file
  - `convert_batch(file_list, output_dir, quality, parallel)`: Batch convert
  - `_get_ffmpeg_params(quality)`: Get quality-specific parameters
  - `_check_ffmpeg_installed()`: Verify FFmpeg availability
- Use ffmpeg-python to construct and execute commands
- Implement progress callback for real-time updates

#### 3. validator.py
- `validate_input_file(path)`: Check if file exists and is MOV
- `validate_output_dir(path)`: Ensure output directory is writable
- `check_disk_space(required_space)`: Verify sufficient disk space
- `is_valid_video(path)`: Use FFmpeg to verify file integrity

#### 4. progress.py
- `ProgressTracker` class
- Use tqdm for progress bars
- Parse FFmpeg output to extract progress information
- Display: filename, percentage, ETA, speed
- Handle multi-file progress tracking

#### 5. utils.py
- File path utilities
- Format converters (seconds to time string, bytes to human-readable)
- Configuration helpers
- Logging setup

## Implementation Strategy

### Phase 1: Core Functionality
1. Set up project structure and dependencies
2. Implement basic single file conversion
3. Add file validation
4. Integrate progress tracking

### Phase 2: Enhanced Features
1. Add quality settings
2. Implement batch conversion
3. Add recursive directory processing
4. Implement parallel processing

### Phase 3: Polish & Testing
1. Comprehensive error handling
2. Write unit and integration tests
3. Add logging
4. Cross-platform testing
5. Documentation

## FFmpeg Command Structure

### Basic Command
```bash
ffmpeg -i input.mov -c:v libx264 -crf 23 -c:a aac -b:a 128k output.mp4
```

### With Progress
```bash
ffmpeg -progress pipe:1 -i input.mov -c:v libx264 -crf [18|23|28] \
       -preset medium -c:a aac -b:a 128k output.mp4
```

### Quality Parameters
- Low: CRF 28, preset fast
- Medium: CRF 23, preset medium (default)
- High: CRF 18, preset slow

## Error Handling Strategy

1. **Pre-conversion Checks**
   - FFmpeg installed and accessible
   - Input files exist and are readable
   - Output directory is writable
   - Sufficient disk space

2. **During Conversion**
   - Monitor FFmpeg process for errors
   - Catch and log exceptions
   - Clean up temp files on failure

3. **Post-conversion**
   - Verify output file exists
   - Validate output file is playable
   - Report success/failure

## Testing Strategy

### Unit Tests
- Validator functions
- Utility functions
- Progress tracking logic
- Quality parameter generation

### Integration Tests
- End-to-end conversion with sample MOV file
- Batch processing
- Error scenarios
- CLI interface

### Manual Testing
- Cross-platform testing (macOS, Linux, Windows)
- Various input file types and sizes
- Edge cases (corrupted files, disk full, etc.)

## Installation & Distribution

### Development Setup
```bash
pip install -e .
```

### User Installation
```bash
pip install mov2mp4
```

### FFmpeg Requirement
- Document FFmpeg installation for each platform
- Check and warn if FFmpeg not found
- Provide helpful error message with installation links
